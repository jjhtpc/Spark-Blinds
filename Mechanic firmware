// Copyright (c) <year>, <copyright holder>
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//     * Redistribution of this software in source or binary forms shall be free
//       of all charges or fees to the recipient of this software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// a maximum of eight servo objects can be created 

 
Servo myservo;

int val;

int ledControl(String command);


void setup() 
{

myservo.attach(A4);  // attaches the servo on analog pin A4 to the servo object 
myservo.attach(A3)
myservo.attach(A2);
Particle.function("ledstate", ledControl);
Particle.variable("checkStatus1", "off");

}

void loop()

{
    
}

int ledControl(String command)


{  //if and else will set on off functionality
    if (command == "1") {   
    myservo.attach(A4);
    delay(500);
    myservo.write(90); 
    Particle.variable("checkStatus1", "on");
    delay(1000);
    myservo.detach();
    myservo.attach(A3);
    delay(500);
    myservo.write(90); 
    Particle.variable("checkStatus1", "on");
    delay(1000);
    myservo.detach();
	  myservo.attach(A2);
    delay(500);
    myservo.write(90); 
    Particle.variable("checkStatus1", "on");
    delay(1000);
    myservo.detach();
    
  } else if(command == "0"){
    myservo.attach(A4);
    delay(500);
    myservo.write(0);  
    Particle.variable("checkStatus1", "off");
    delay(1000);
    myservo.detach();
    myservo.attach(A3);
    delay(500);
    myservo.write(0);  
    Particle.variable("checkStatus1", "off");
    delay(1000);
    myservo.detach();
	  myservo.attach(A2);
    delay(500);
    myservo.write(0);  
    Particle.variable("checkStatus1", "off");
    delay(1000);
    myservo.detach();
      }
     
    else{
    myservo.attach(A4);
    delay(500);
    val = command.toInt(); //converts command to integer to be used for positional arrangement
    val = map (val, 0, 99, 2, 180);
    myservo.write(val);
    Particle.variable("checkStatus1", "on");
    delay(1200);
    myservo.detach();
    myservo.attach(A3);
    delay(500);
    val = command.toInt(); //converts command to integer to be used for positional arrangement
    val = map (val, 0, 99, 2, 180);
    myservo.write(val);
    Particle.variable("checkStatus1", "on");
    delay(1200);
    myservo.detach();
	  myservo.attach(A2);
    delay(500);
    val = command.toInt(); //converts command to integer to be used for positional arrangement
    val = map (val, 0, 99, 2, 180);
    myservo.write(val);
    Particle.variable("checkStatus1", "on");
    delay(1200);
    myservo.detach();
    }
}



